from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.DataBase as db
import app.keyboards as kb
from sqlalchemy import select
from config import IDForDebugMessage


router = Router()

def RegisterHandlers(bot):
    class Task(StatesGroup):
        task = State()

    class EditTask(StatesGroup):
        task = State()

    class EditStatus(StatesGroup):
        status = State()

    class DebugMessage(StatesGroup):
        text = State()

    class Action(StatesGroup):
        action = State()

    # cancel
    @router.message(F.text == "/–û—Ç–º–µ–Ω–∞")
    async def CancelDebugMessage(message: Message, state: FSMContext):
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ö†Ô∏è‚ùå",
                             reply_markup=kb.mainMenu)
        await state.clear()

    #pagination
    async def GetPages(user_id:int, page:int, page_size:int) -> list[db.Task]:
        offset = page * page_size
        limit = page_size + 1
        async with db.AsyncSession() as session:
            stmt = (
                select(db.Task)
                .where(db.Task.user_id == user_id)
                .limit(limit)
                .offset(offset)
            )
            data = await session.execute(stmt)
            return data.scalars().all()

    #render pages
    async def RenderPages(user_id:int, page:int = 0, page_size:int = 10) -> tuple[str, bool, list[db.Task]]:
        data = await GetPages(user_id=user_id, page=page, page_size=page_size)
        tasks = ""

        for iter, task in enumerate(data[:page_size], start=1+ page * page_size):
            tasks += f"üìÉ Task {iter}:  {task.text} | {task.status}\n\n"

        return tasks or "–∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç ü•∫", len(data) > page_size, data[:page_size]

    #exit callback
    @router.callback_query(F.data == "exit")
    async def handleExitCallback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=kb.mainMenu
        )
        await state.clear()
        await callback.answer()

    #paging callback
    @router.callback_query(F.data.startswith("page:"))
    async def handlePageCallback(callback: CallbackQuery, state: FSMContext):
        page = int(callback.data.split(":")[1])
        state_name = await state.get_state()
        text, IsNextPage, tasks = await RenderPages(user_id=callback.from_user.id, page=page)
        if state_name == Action.action:
            keyboard = await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=page)
        else:
            keyboard = await kb.inline_tasks(next_page=IsNextPage, page=page)
        await callback.message.edit_text(
            text,
            reply_markup=keyboard
        )
        await callback.answer()

    #action callback
    @router.callback_query(F.data.startswith("choise:"))
    async def handleActionCallback(callback: CallbackQuery, state: FSMContext):
        Task_ID = int(callback.data.split(":")[1])
        data = await state.get_data()
        action = data.get("action")
        if action == "edit":
            await state.set_state(EditTask.task)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É ‚úèÔ∏è", reply_markup=kb.cancel)
            await state.update_data(taskID= Task_ID)
            await callback.message.delete()
        elif action == "delete":
            async with db.AsyncSession() as session:
                stmt = (
                    select(db.Task)
                    .where(db.Task.id == Task_ID)
                )
                result = await session.execute(stmt)
                task = result.scalars().first()

                if task:
                    await session.delete(task)
                    await session.commit()
            text, IsNextPage, tasks = await RenderPages(user_id=callback.from_user.id, page=0)
            await callback.message.edit_text(text, reply_markup=await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=0))

        elif action == "status":
            await state.set_state(EditStatus.status)
            await state.update_data(taskID= Task_ID)
            sent_msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ‚úèÔ∏è", reply_markup=kb.status)
            await state.update_data(messageID= sent_msg.message_id)
            await callback.message.delete()

        await callback.answer()
    #/start
    @router.message(CommandStart())
    async def cmd_start(message: Message):
        await message.answer("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç pet-–ø—Ä–æ–µ–∫—Ç ToDo –ª–∏—Å—Ç–∞ üëãüëãüëã",
                             reply_markup=kb.mainMenu)

    #adding tasks
    @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    async def AddTask(message: Message, state: FSMContext):
        await state.set_state(Task.task)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É ‚úèÔ∏è", reply_markup=kb.cancel)

    @router.message(Task.task, ~F.text)
    async def WrongTaskText(message: Message, state: FSMContext):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –æ–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ö†Ô∏è‚ùå",
                             reply_markup=kb.mainMenu)
        await state.clear()

    @router.message(Task.task)
    async def GetTaskText(message: Message, state: FSMContext):
        await state.update_data(task=message.text)
        data = await state.get_data()
        async with db.AsyncSession() as session:
            task = db.Task(user_id= message.from_user.id, text=data["task"])
            session.add(task)
            await session.commit()
        await message.answer(f"–∑–∞–¥–∞—á–∞ {data['task']}, —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üéâ‚úÖ",
                             reply_markup=kb.mainMenu)
        await state.clear()

    #show all tasks
    @router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
    async def ShowTasks(message: Message):
        user = message.from_user.id
        text, IsNextPage, _ = await RenderPages(user_id=user, page=0)
        await message.answer(text, reply_markup= await kb.inline_tasks(next_page=IsNextPage, page=0))

    #edit tasks
    @router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
    async def GetUpdateTask(message: Message, state: FSMContext):
        user = message.from_user.id
        await state.set_state(Action.action)
        await state.update_data(action= "edit")
        text, IsNextPage, tasks = await RenderPages(user_id=user, page=0)
        await message.answer(text, reply_markup= await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=0))

    @router.message(EditTask.task)
    async def UpdateTask(message: Message, state: FSMContext):
        data = await state.get_data()
        taskID = data.get("taskID")
        async with db.AsyncSession() as session:
            stmt = (
                select(db.Task)
                .where(db.Task.id == taskID)
            )
            result = await session.execute(stmt)
            task = result.scalars().first()

            if task:
                task.text = message.text
                await session.commit()

        await state.clear()
        await state.set_state(Action.action)
        await state.update_data(action= "edit")
        text, IsNextPage, tasks = await RenderPages(user_id=message.from_user.id, page=0)
        await message.answer(text, reply_markup=await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=0))

    #delete tasks
    @router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    async def deleteTask(message: Message, state: FSMContext):
        user = message.from_user.id
        await state.set_state(Action.action)
        await state.update_data(action= "delete")
        text, IsNextPage, tasks = await RenderPages(user_id=user, page=0)
        await message.answer(text, reply_markup= await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=0))

    # change task's status
    @router.message(F.text == "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
    async def GetChangeTaskStatus(message: Message, state: FSMContext):
        user = message.from_user.id
        await state.set_state(Action.action)
        await state.update_data(action= "status")
        text, IsNextPage, tasks = await RenderPages(user_id=user, page=0)
        await message.answer(text, reply_markup= await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=0))

    @router.message(EditStatus.status) #---------------------------------------------------------------------------------
    async def ChangeTaskStatus(message: Message, state: FSMContext):
        data = await state.get_data()
        taskID = data.get("taskID")
        messageID = data.get("messageID")
        await bot.delete_message(chat_id=message.chat.id, message_id=messageID)
        await state.update_data(messageID=None)
        statuses = ["To Do üìù", "In progress ‚è≥", "Done ‚úÖ"]
        if(message.text in statuses):
            async with db.AsyncSession() as session:
                stmt = (
                    select(db.Task)
                    .where(db.Task.id == taskID)
                )
                result = await session.execute(stmt)
                task = result.scalars().first()

                if task:
                    task.status = message.text
                    await session.commit()

        else:
            await message.answer("–¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç")
        await state.clear()
        await state.set_state(Action.action)
        await state.update_data(action= "status")
        text, IsNextPage, tasks = await RenderPages(user_id=message.from_user.id, page=0)
        await message.answer(text, reply_markup=await kb.inline_tasks(tasks=tasks, next_page=IsNextPage, page=0))

    #Debuging
    @router.message(F.text == "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ")
    async def SendDebugMessage(message: Message, state: FSMContext):
        await state.set_state(DebugMessage.text)
        await message.answer("—Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å? ‚úèÔ∏è", reply_markup=kb.cancel)

    @router.message(DebugMessage.text, F.text == "/–û—Ç–º–µ–Ω–∞")
    async def CancelDebugMessage(message: Message, state: FSMContext):
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ö†Ô∏è‚ùå",
                             reply_markup=kb.mainMenu)
        await state.clear()

    @router.message(DebugMessage.text)
    async def GetDebugMessage(message: Message, state: FSMContext):
        await bot.send_message(IDForDebugMessage, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\n\n–æ—à–∏–±–∫–∞: {message.text}\n")
        await message.answer("–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üéâ‚úÖ\n—Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ",
                             reply_markup=kb.mainMenu)
        await state.clear()

    #fallback
    @router.message()
    async def fallback_handler(message: Message):
        await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É", reply_markup=kb.mainMenu)